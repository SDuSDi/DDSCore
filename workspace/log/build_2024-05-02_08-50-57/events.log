[0.000000] (-) TimerEvent: {}
[0.000110] (core) JobQueued: {'identifier': 'core', 'dependencies': OrderedDict()}
[0.000318] (core) JobStarted: {'identifier': 'core'}
[0.007220] (core) JobProgress: {'identifier': 'core', 'progress': 'cmake'}
[0.007551] (core) JobProgress: {'identifier': 'core', 'progress': 'build'}
[0.007850] (core) Command: {'cmd': ['/usr/bin/cmake', '--build', '/root/workspace/build/core', '--', '-j20', '-l20'], 'cwd': '/root/workspace/build/core', 'env': OrderedDict([('TMUX', '/tmp/tmux-0/default,49,0'), ('HOSTNAME', 'GTX-3060-2'), ('SHLVL', '3'), ('LD_LIBRARY_PATH', '/root/microros_ws/install/px4_ros_com/lib:/root/microros_ws/install/px4_msgs/lib:/root/microros_ws/install/micro_ros_agent/lib:/root/microros_ws/install/micro_ros_msgs/lib:/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/lib/x86_64-linux-gnu:/opt/ros/foxy/lib'), ('HOME', '/root'), ('OLDPWD', '/root'), ('ROS_PYTHON_VERSION', '3'), ('COLCON_PREFIX_PATH', '/root/microros_ws/install'), ('ROS_DISTRO', 'foxy'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('TERM', 'screen'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/gcc-arm-none-eabi-9-2020-q2-update/bin:/opt/ros/foxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'), ('DISPLAY', ':1'), ('LANG', 'C.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('AMENT_PREFIX_PATH', '/root/microros_ws/install/px4_ros_com:/root/microros_ws/install/px4_msgs:/root/microros_ws/install/micro_ros_setup:/root/microros_ws/install/micro_ros_agent:/root/microros_ws/install/micro_ros_msgs:/opt/ros/foxy'), ('SHELL', '/bin/bash'), ('PWD', '/root/workspace/build/core'), ('LC_ALL', 'C.UTF-8'), ('PYTHONPATH', '/root/microros_ws/install/px4_ros_com/lib/python3.8/site-packages:/root/microros_ws/install/px4_msgs/lib/python3.8/site-packages:/root/microros_ws/install/micro_ros_msgs/lib/python3.8/site-packages:/opt/ros/foxy/lib/python3.8/site-packages'), ('COLCON', '1'), ('TMUX_PANE', '%3'), ('CMAKE_PREFIX_PATH', '/root/microros_ws/install/px4_ros_com:/root/microros_ws/install/px4_msgs:/root/microros_ws/install/micro_ros_setup:/root/microros_ws/install/micro_ros_agent:/root/microros_ws/install/micro_ros_msgs:/opt/ros/foxy')]), 'shell': False}
[0.040762] (core) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/node.dir/src/offb_node.cpp.o\x1b[0m\n'}
[0.099877] (-) TimerEvent: {}
[0.200150] (-) TimerEvent: {}
[0.300427] (-) TimerEvent: {}
[0.400696] (-) TimerEvent: {}
[0.500974] (-) TimerEvent: {}
[0.601286] (-) TimerEvent: {}
[0.689703] (core) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/context.hpp:19\x1b[m\x1b[K,\n'}
[0.689925] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/contexts/default_context.hpp:18\x1b[m\x1b[K,\n'}
[0.690007] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:32\x1b[m\x1b[K,\n'}
[0.690075] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[0.690139] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.690202] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[0.690264] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:2\x1b[m\x1b[K:\n'}
[0.690325] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<void (ControlNode::*)(), ControlNode*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.690388] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:787:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, void (ControlNode::*)(), ControlNode*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.690459] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:808:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (ControlNode::*)(); _BoundArgs = {ControlNode*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.690526] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:50:160:\x1b[m\x1b[K   required from here\n'}
[0.690588] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:775:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[0.690653] (core) StderrLine: {'line': b'  774 |       static_assert(_Varargs::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K\n'}
[0.690715] (core) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K~~~~~\x1b[m\x1b[K\n'}
[0.690777] (core) StderrLine: {'line': b'  775 | \x1b[01;31m\x1b[K      ? sizeof...(_BoundArgs) >= _Arity::value + 1\x1b[m\x1b[K\n'}
[0.690837] (core) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.690896] (core) StderrLine: {'line': b'  776 | \x1b[01;31m\x1b[K      : sizeof...(_BoundArgs) == _Arity::value + 1\x1b[m\x1b[K,\n'}
[0.690966] (core) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.701377] (-) TimerEvent: {}
[0.711114] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:\x1b[m\x1b[K In function \xe2\x80\x98\x1b[01m\x1b[Kvoid publish_offboard_control()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.711277] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:190:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid use of \xe2\x80\x98\x1b[01m\x1b[Kthis\x1b[m\x1b[K\xe2\x80\x99 in non-member function\n'}
[0.711343] (core) StderrLine: {'line': b'  190 |     msg.timestamp = \x1b[01;31m\x1b[Kthis\x1b[m\x1b[K -> get_clock() -> now().nanoseconds() / 1000;\n'}
[0.711404] (core) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.712928] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:191:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koffboard_controller\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.712998] (core) StderrLine: {'line': b'  191 |     \x1b[01;31m\x1b[Koffboard_controller\x1b[m\x1b[K -> publish(msg);\n'}
[0.713066] (core) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.801473] (-) TimerEvent: {}
[0.901746] (-) TimerEvent: {}
[1.002012] (-) TimerEvent: {}
[1.102274] (-) TimerEvent: {}
[1.202540] (-) TimerEvent: {}
[1.302798] (-) TimerEvent: {}
[1.403077] (-) TimerEvent: {}
[1.503338] (-) TimerEvent: {}
[1.603599] (-) TimerEvent: {}
[1.703855] (-) TimerEvent: {}
[1.804113] (-) TimerEvent: {}
[1.904369] (-) TimerEvent: {}
[2.004638] (-) TimerEvent: {}
[2.104931] (-) TimerEvent: {}
[2.205186] (-) TimerEvent: {}
[2.243168] (core) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/callback_group.hpp:27\x1b[m\x1b[K,\n'}
[2.243422] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[2.243682] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategy.hpp:24\x1b[m\x1b[K,\n'}
[2.243717] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[2.243743] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[2.243768] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:33\x1b[m\x1b[K,\n'}
[2.243791] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[2.243815] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.243838] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[2.243860] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:2\x1b[m\x1b[K:\n'}
[2.243891] (core) StderrLine: {'line': b'/opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.243925] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.243951] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.243973] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:223:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for call to \xe2\x80\x98\x1b[01m\x1b[K(std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>) ()\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.243998] (core) StderrLine: {'line': b'  223 |     \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K();\n'}
[2.244021] (core) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[2.244043] (core) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/context.hpp:19\x1b[m\x1b[K,\n'}
[2.244066] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/contexts/default_context.hpp:18\x1b[m\x1b[K,\n'}
[2.244088] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:32\x1b[m\x1b[K,\n'}
[2.244109] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[2.244130] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.244152] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[2.244174] (core) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/root/workspace/src/core/src/offb_node.cpp:2\x1b[m\x1b[K:\n'}
[2.244196] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:480:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244219] (core) StderrLine: {'line': b'  480 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(_Args&&... __args)\n'}
[2.244241] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.244262] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:480:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.244284] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.244308] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:443:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = void (ControlNode::*)(); _CallArgs = std::tuple<>; _BArgs = {ControlNode*, std::_Placeholder<1>}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244332] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:447:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs> using _Res_type = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<_Functor, _CallArgs, _Bound_args ...> [with _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244355] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:478:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244383] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244405] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.244426] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:439:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for call to \xe2\x80\x98\x1b[01m\x1b[K(std::_Mu<std::_Placeholder<1>, false, true>) (std::_Placeholder<1>&, std::tuple<>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244448] (core) StderrLine: {'line': b'  439 |      \x1b[01;31m\x1b[K_Mu<typename remove_cv<_BoundArg>::type>()(\x1b[m\x1b[K\n'}
[2.244470] (core) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[2.244491] (core) StderrLine: {'line': b'  440 | \x1b[01;31m\x1b[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())\x1b[m\x1b[K );\n'}
[2.244511] (core) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.244532] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244554] (core) StderrLine: {'line': b'  345 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(const volatile _Arg&, _Tuple& __tuple) const volatile\n'}
[2.244574] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.244595] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.244616] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int __i, class _Tuple> using _Safe_tuple_element_t = typename std::enable_if<(__i < std::tuple_size<_Tuple>::value), std::tuple_element<__i, _Tuple> >::type::type [with long unsigned int __i = (1 - 1); _Tuple = std::tuple<>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.244637] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<0, _Tuple>&& std::_Mu<std::_Placeholder<1>, false, true>::operator()<_Tuple>(const volatile std::_Placeholder<1>&, _Tuple&) const volatile [with _Tuple = std::tuple<>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244660] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:439:48:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244686] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:443:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = void (ControlNode::*)(); _CallArgs = std::tuple<>; _BArgs = {ControlNode*, std::_Placeholder<1>}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244712] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:447:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs> using _Res_type = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<_Functor, _CallArgs, _Bound_args ...> [with _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244735] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:478:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244764] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244787] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.244808] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:260:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::tuple_element<0, std::tuple<> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244830] (core) StderrLine: {'line': b'  260 |     using \x1b[01;31m\x1b[K_Safe_tuple_element_t\x1b[m\x1b[K\n'}
[2.244852] (core) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.244872] (core) StderrLine: {'line': b'/opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.244897] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244921] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.244942] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:491:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) const [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.244963] (core) StderrLine: {'line': b'  491 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(_Args&&... __args) const\n'}
[2.244987] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.245007] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:491:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.245029] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = const std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.245052] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:443:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_const<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_const<ControlNode*>::type, std::add_const<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245078] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:454:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_const; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245102] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:489:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245125] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245148] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.245170] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:439:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for call to \xe2\x80\x98\x1b[01m\x1b[K(std::_Mu<std::_Placeholder<1>, false, true>) (const std::_Placeholder<1>&, std::tuple<>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245191] (core) StderrLine: {'line': b'  439 |      \x1b[01;31m\x1b[K_Mu<typename remove_cv<_BoundArg>::type>()(\x1b[m\x1b[K\n'}
[2.245212] (core) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[2.245233] (core) StderrLine: {'line': b'  440 | \x1b[01;31m\x1b[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())\x1b[m\x1b[K );\n'}
[2.245253] (core) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.245273] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245296] (core) StderrLine: {'line': b'  345 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(const volatile _Arg&, _Tuple& __tuple) const volatile\n'}
[2.245317] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.245338] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.245358] (core) StderrLine: {'line': b'/opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.245384] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245409] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.245430] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:509:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) volatile [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245454] (core) StderrLine: {'line': b'  509 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(_Args&&... __args) volatile\n'}
[2.245475] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.245496] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:509:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.245518] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = volatile std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.245541] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:443:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_volatile<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_volatile<ControlNode*>::type, std::add_volatile<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245564] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:454:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_volatile; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245591] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:506:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245615] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245639] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.245664] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:439:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for call to \xe2\x80\x98\x1b[01m\x1b[K(std::_Mu<std::_Placeholder<1>, false, true>) (volatile std::_Placeholder<1>&, std::tuple<>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245687] (core) StderrLine: {'line': b'  439 |      \x1b[01;31m\x1b[K_Mu<typename remove_cv<_BoundArg>::type>()(\x1b[m\x1b[K\n'}
[2.245708] (core) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[2.245729] (core) StderrLine: {'line': b'  440 | \x1b[01;31m\x1b[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())\x1b[m\x1b[K );\n'}
[2.245750] (core) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.245772] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245794] (core) StderrLine: {'line': b'  345 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(const volatile _Arg&, _Tuple& __tuple) const volatile\n'}
[2.245814] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.245835] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.245855] (core) StderrLine: {'line': b'/opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.245879] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245903] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.245925] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:521:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) const volatile [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.245948] (core) StderrLine: {'line': b'  521 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(_Args&&... __args) const volatile\n'}
[2.245970] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.245991] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:521:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.246013] (core) StderrLine: {'line': b'/usr/include/c++/9/functional: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = const volatile std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.246036] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:443:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_cv<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_cv<ControlNode*>::type, std::add_cv<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246062] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:454:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_cv; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246085] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:518:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246107] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246131] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:\x1b[m\x1b[K   required from here\n'}
[2.246153] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:439:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for call to \xe2\x80\x98\x1b[01m\x1b[K(std::_Mu<std::_Placeholder<1>, false, true>) (const volatile std::_Placeholder<1>&, std::tuple<>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246176] (core) StderrLine: {'line': b'  439 |      \x1b[01;31m\x1b[K_Mu<typename remove_cv<_BoundArg>::type>()(\x1b[m\x1b[K\n'}
[2.246198] (core) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[2.246221] (core) StderrLine: {'line': b'  440 | \x1b[01;31m\x1b[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())\x1b[m\x1b[K );\n'}
[2.246243] (core) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.246263] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.246287] (core) StderrLine: {'line': b'  345 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K()(const volatile _Arg&, _Tuple& __tuple) const volatile\n'}
[2.246309] (core) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.246330] (core) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/functional:345:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.305313] (-) TimerEvent: {}
[2.405571] (-) TimerEvent: {}
[2.505821] (-) TimerEvent: {}
[2.593821] (core) StderrLine: {'line': b'make[2]: *** [CMakeFiles/node.dir/build.make:63: CMakeFiles/node.dir/src/offb_node.cpp.o] Error 1\n'}
[2.593974] (core) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/node.dir/all] Error 2\n'}
[2.594025] (core) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[2.595008] (core) CommandEnded: {'returncode': 2}
[2.605901] (-) TimerEvent: {}
[2.619550] (core) JobEnded: {'identifier': 'core', 'rc': 2}
[2.629966] (-) EventReactorShutdown: {}
