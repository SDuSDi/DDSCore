[0.008s] Invoking command in '/root/workspace/build/core': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/foxy /usr/bin/cmake --build /root/workspace/build/core -- -j20 -l20
[0.041s] [ 50%] [32mBuilding CXX object CMakeFiles/node.dir/src/offb_node.cpp.o[0m
[0.689s] In file included from [01m[K/opt/ros/foxy/include/rclcpp/context.hpp:19[m[K,
[0.690s]                  from [01m[K/opt/ros/foxy/include/rclcpp/contexts/default_context.hpp:18[m[K,
[0.690s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executor.hpp:32[m[K,
[0.690s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[0.690s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors.hpp:21[m[K,
[0.690s]                  from [01m[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146[m[K,
[0.690s]                  from [01m[K/root/workspace/src/core/src/offb_node.cpp:2[m[K:
[0.690s] /usr/include/c++/9/functional: In instantiation of â€˜[01m[Kstruct std::_Bind_check_arity<void (ControlNode::*)(), ControlNode*, const std::_Placeholder<1>&>[m[Kâ€™:
[0.690s] [01m[K/usr/include/c++/9/functional:787:12:[m[K   required from â€˜[01m[Kstruct std::_Bind_helper<false, void (ControlNode::*)(), ControlNode*, const std::_Placeholder<1>&>[m[Kâ€™
[0.690s] [01m[K/usr/include/c++/9/functional:808:5:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (ControlNode::*)(); _BoundArgs = {ControlNode*, const std::_Placeholder<1>&}][m[Kâ€™
[0.690s] [01m[K/root/workspace/src/core/src/offb_node.cpp:50:160:[m[K   required from here
[0.690s] [01m[K/usr/include/c++/9/functional:775:7:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: Wrong number of arguments for pointer-to-member
[0.690s]   774 |       static_assert(_Varargs::[01;31m[Kvalue[m[K
[0.690s]       |                               [01;31m[K~~~~~[m[K
[0.690s]   775 | [01;31m[K      ? sizeof...(_BoundArgs) >= _Arity::value + 1[m[K
[0.690s]       |       [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[0.691s]   776 | [01;31m[K      : sizeof...(_BoundArgs) == _Arity::value + 1[m[K,
[0.691s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[0.711s] [01m[K/root/workspace/src/core/src/offb_node.cpp:[m[K In function â€˜[01m[Kvoid publish_offboard_control()[m[Kâ€™:
[0.711s] [01m[K/root/workspace/src/core/src/offb_node.cpp:190:21:[m[K [01;31m[Kerror: [m[Kinvalid use of â€˜[01m[Kthis[m[Kâ€™ in non-member function
[0.711s]   190 |     msg.timestamp = [01;31m[Kthis[m[K -> get_clock() -> now().nanoseconds() / 1000;
[0.711s]       |                     [01;31m[K^~~~[m[K
[0.713s] [01m[K/root/workspace/src/core/src/offb_node.cpp:191:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Koffboard_controller[m[Kâ€™ was not declared in this scope
[0.713s]   191 |     [01;31m[Koffboard_controller[m[K -> publish(msg);
[0.713s]       |     [01;31m[K^~~~~~~~~~~~~~~~~~~[m[K
[2.243s] In file included from [01m[K/opt/ros/foxy/include/rclcpp/callback_group.hpp:27[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/any_executable.hpp:20[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/memory_strategy.hpp:24[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/memory_strategies.hpp:18[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executor_options.hpp:20[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executor.hpp:33[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors.hpp:21[m[K,
[2.243s]                  from [01m[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146[m[K,
[2.243s]                  from [01m[K/root/workspace/src/core/src/offb_node.cpp:2[m[K:
[2.244s] /opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™:
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:223:5:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>) ()[m[Kâ€™
[2.244s]   223 |     [01;31m[Kcallback_[m[K();
[2.244s]       |     [01;31m[K^~~~~~~~~[m[K
[2.244s] In file included from [01m[K/opt/ros/foxy/include/rclcpp/context.hpp:19[m[K,
[2.244s]                  from [01m[K/opt/ros/foxy/include/rclcpp/contexts/default_context.hpp:18[m[K,
[2.244s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executor.hpp:32[m[K,
[2.244s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[2.244s]                  from [01m[K/opt/ros/foxy/include/rclcpp/executors.hpp:21[m[K,
[2.244s]                  from [01m[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146[m[K,
[2.244s]                  from [01m[K/root/workspace/src/core/src/offb_node.cpp:2[m[K:
[2.244s] [01m[K/usr/include/c++/9/functional:480:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s]   480 |  [01;36m[Koperator[m[K()(_Args&&... __args)
[2.244s]       |  [01;36m[K^~~~~~~~[m[K
[2.244s] [01m[K/usr/include/c++/9/functional:480:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.244s] /usr/include/c++/9/functional: In substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™:
[2.244s] [01m[K/usr/include/c++/9/functional:443:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = void (ControlNode::*)(); _CallArgs = std::tuple<>; _BArgs = {ControlNode*, std::_Placeholder<1>}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:447:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs> using _Res_type = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<_Functor, _CallArgs, _Bound_args ...> [with _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:478:9:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.244s] [01m[K/usr/include/c++/9/functional:439:48:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(std::_Mu<std::_Placeholder<1>, false, true>) (std::_Placeholder<1>&, std::tuple<>&)[m[Kâ€™
[2.244s]   439 |      [01;31m[K_Mu<typename remove_cv<_BoundArg>::type>()([m[K
[2.244s]       |      [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^[m[K
[2.244s]   440 | [01;31m[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())[m[K );
[2.244s]       |        [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.244s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>][m[Kâ€™
[2.244s]   345 |  [01;36m[Koperator[m[K()(const volatile _Arg&, _Tuple& __tuple) const volatile
[2.244s]       |  [01;36m[K^~~~~~~~[m[K
[2.244s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.244s] /usr/include/c++/9/functional: In substitution of â€˜[01m[Ktemplate<long unsigned int __i, class _Tuple> using _Safe_tuple_element_t = typename std::enable_if<(__i < std::tuple_size<_Tuple>::value), std::tuple_element<__i, _Tuple> >::type::type [with long unsigned int __i = (1 - 1); _Tuple = std::tuple<>][m[Kâ€™:
[2.244s] [01m[K/usr/include/c++/9/functional:345:2:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<0, _Tuple>&& std::_Mu<std::_Placeholder<1>, false, true>::operator()<_Tuple>(const volatile std::_Placeholder<1>&, _Tuple&) const volatile [with _Tuple = std::tuple<>][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:439:48:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:443:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = void (ControlNode::*)(); _CallArgs = std::tuple<>; _BArgs = {ControlNode*, std::_Placeholder<1>}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:447:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs> using _Res_type = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<_Functor, _CallArgs, _Bound_args ...> [with _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.244s] [01m[K/usr/include/c++/9/functional:478:9:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.244s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.244s] [01m[K/usr/include/c++/9/functional:260:11:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, std::tuple_element<0, std::tuple<> > >[m[Kâ€™
[2.244s]   260 |     using [01;31m[K_Safe_tuple_element_t[m[K
[2.244s]       |           [01;31m[K^~~~~~~~~~~~~~~~~~~~~[m[K
[2.245s] /opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™:
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.245s] [01m[K/usr/include/c++/9/functional:491:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) const [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s]   491 |  [01;36m[Koperator[m[K()(_Args&&... __args) const
[2.245s]       |  [01;36m[K^~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:491:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.245s] /usr/include/c++/9/functional: In substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = const std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™:
[2.245s] [01m[K/usr/include/c++/9/functional:443:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_const<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_const<ControlNode*>::type, std::add_const<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s] [01m[K/usr/include/c++/9/functional:454:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_const; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s] [01m[K/usr/include/c++/9/functional:489:9:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.245s] [01m[K/usr/include/c++/9/functional:439:48:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(std::_Mu<std::_Placeholder<1>, false, true>) (const std::_Placeholder<1>&, std::tuple<>&)[m[Kâ€™
[2.245s]   439 |      [01;31m[K_Mu<typename remove_cv<_BoundArg>::type>()([m[K
[2.245s]       |      [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^[m[K
[2.245s]   440 | [01;31m[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())[m[K );
[2.245s]       |        [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>][m[Kâ€™
[2.245s]   345 |  [01;36m[Koperator[m[K()(const volatile _Arg&, _Tuple& __tuple) const volatile
[2.245s]       |  [01;36m[K^~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.245s] /opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™:
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.245s] [01m[K/usr/include/c++/9/functional:509:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) volatile [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s]   509 |  [01;36m[Koperator[m[K()(_Args&&... __args) volatile
[2.245s]       |  [01;36m[K^~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:509:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.245s] /usr/include/c++/9/functional: In substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = volatile std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™:
[2.245s] [01m[K/usr/include/c++/9/functional:443:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_volatile<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_volatile<ControlNode*>::type, std::add_volatile<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s] [01m[K/usr/include/c++/9/functional:454:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_volatile; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.245s] [01m[K/usr/include/c++/9/functional:506:9:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.245s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.245s] [01m[K/usr/include/c++/9/functional:439:48:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(std::_Mu<std::_Placeholder<1>, false, true>) (volatile std::_Placeholder<1>&, std::tuple<>&)[m[Kâ€™
[2.245s]   439 |      [01;31m[K_Mu<typename remove_cv<_BoundArg>::type>()([m[K
[2.245s]       |      [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^[m[K
[2.245s]   440 | [01;31m[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())[m[K );
[2.245s]       |        [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>][m[Kâ€™
[2.245s]   345 |  [01;36m[Koperator[m[K()(const volatile _Arg&, _Tuple& __tuple) const volatile
[2.245s]       |  [01;36m[K^~~~~~~~[m[K
[2.245s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.245s] /opt/ros/foxy/include/rclcpp/timer.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™:
[2.246s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.246s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.246s] [01m[K/usr/include/c++/9/functional:521:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class ... _Args, class _Result> _Result std::_Bind<_Functor(_Bound_args ...)>::operator()(_Args&& ...) const volatile [with _Args = {_Args ...}; _Result = _Result; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.246s]   521 |  [01;36m[Koperator[m[K()(_Args&&... __args) const volatile
[2.246s]       |  [01;36m[K^~~~~~~~[m[K
[2.246s] [01m[K/usr/include/c++/9/functional:521:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.246s] /usr/include/c++/9/functional: In substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _BoundArg, class _CallArgs> using _Mu_type = decltype (std::_Mu<typename std::remove_cv<_Up>::type>()(declval<_BoundArg&>(), declval<_CallArgs&>())) [with _BoundArg = const volatile std::_Placeholder<1>; _CallArgs = std::tuple<>; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™:
[2.246s] [01m[K/usr/include/c++/9/functional:443:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _Fn, class _CallArgs, class ... _BArgs> using _Res_type_impl = typename std::result_of<_Fn&(std::_Bind<_Functor(_Bound_args ...)>::_Mu_type<_BArgs, _CallArgs>&& ...)>::type [with _Fn = std::add_cv<void (ControlNode::*)()>::type; _CallArgs = std::tuple<>; _BArgs = {std::add_cv<ControlNode*>::type, std::add_cv<std::_Placeholder<1> >::type}; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.246s] [01m[K/usr/include/c++/9/functional:454:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Functor, class ... _Bound_args> template<class _CallArgs, template<class _CallArgs, template<class> class __cv_quals> template<class _Functor, class ... _Bound_args> template<class> class __cv_quals> using _Res_type_cv = std::_Bind<_Functor(_Bound_args ...)>::_Res_type_impl<typename __cv_quals<typename std::enable_if<(bool)((std::tuple_size<_Tuple>::value + 1)), _Functor>::type>::type, _CallArgs, typename __cv_quals<_Bound_args>::type ...> [with _CallArgs = std::tuple<>; __cv_quals = std::add_cv; _Functor = void (ControlNode::*)(); _Bound_args = {ControlNode*, std::_Placeholder<1>}][m[Kâ€™
[2.246s] [01m[K/usr/include/c++/9/functional:518:9:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback_delegate() [with CallbackT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<rclcpp::function_traits::same_arguments<CallbackT, std::function<void()> >::value>::type* <anonymous> = 0; FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.246s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:209:5:[m[K   required from â€˜[01m[Kvoid rclcpp::GenericTimer<FunctorT, <anonymous> >::execute_callback() [with FunctorT = std::_Bind<void (ControlNode::*(ControlNode*, std::_Placeholder<1>))()>; typename std::enable_if<(rclcpp::function_traits::same_arguments<FunctorT, std::function<void()> >::value || rclcpp::function_traits::same_arguments<FunctorT, std::function<void(rclcpp::TimerBase&)> >::value)>::type* <anonymous> = 0][m[Kâ€™
[2.246s] [01m[K/opt/ros/foxy/include/rclcpp/timer.hpp:199:3:[m[K   required from here
[2.246s] [01m[K/usr/include/c++/9/functional:439:48:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(std::_Mu<std::_Placeholder<1>, false, true>) (const volatile std::_Placeholder<1>&, std::tuple<>&)[m[Kâ€™
[2.246s]   439 |      [01;31m[K_Mu<typename remove_cv<_BoundArg>::type>()([m[K
[2.246s]       |      [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^[m[K
[2.246s]   440 | [01;31m[K       std::declval<_BoundArg&>(), std::declval<_CallArgs&>())[m[K );
[2.246s]       |        [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.246s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tuple> std::_Safe_tuple_element_t<(std::is_placeholder<_Tp>::value - 1), _Tuple>&& std::_Mu<_Arg, false, true>::operator()(const volatile _Arg&, _Tuple&) const volatile [with _Tuple = _Tuple; _Arg = std::_Placeholder<1>][m[Kâ€™
[2.246s]   345 |  [01;36m[Koperator[m[K()(const volatile _Arg&, _Tuple& __tuple) const volatile
[2.246s]       |  [01;36m[K^~~~~~~~[m[K
[2.246s] [01m[K/usr/include/c++/9/functional:345:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.594s] make[2]: *** [CMakeFiles/node.dir/build.make:63: CMakeFiles/node.dir/src/offb_node.cpp.o] Error 1
[2.594s] make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/node.dir/all] Error 2
[2.594s] make: *** [Makefile:141: all] Error 2
[2.595s] Invoked command in '/root/workspace/build/core' returned '2': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/foxy /usr/bin/cmake --build /root/workspace/build/core -- -j20 -l20
