# Specify ROS version for the image
FROM ros:humble

# Set bash as default shell
SHELL ["/bin/bash", "-c"]

######################################################################################################
#                                            BUILD                                                   #
######################################################################################################

# Instalation of prerequisites for MQTT
RUN apt-get update && \
    apt-get install build-essential gcc make cmake && \
    apt-get install -y libssl-dev && \
    apt-get install -y doxygen graphviz && \
    apt install -y git-all

# Install Paho MQTT C and build it
RUN git clone https://github.com/eclipse/paho.mqtt.c.git && \
    cd paho.mqtt.c && \
    git checkout v1.3.13 && \
    cmake -Bbuild -H. -DPAHO_ENABLE_TESTING=OFF -DPAHO_WITH_SSL=ON -DPAHO_HIGH_PERFORMANCE=ON && \
    sudo cmake --build build/ --target install

# Install Paho MQTT C++ and build it
RUN git clone https://github.com/eclipse/paho.mqtt.cpp && \
    cd paho.mqtt.cpp && \
    # git co v1.4.0 && \
    git submodule init && \
    git submodule update && \
    cmake -Bbuild -H. -DPAHO_BUILD_SAMPLES=ON && \
    cmake --build build/ --target install

######################################################################################################

# Install nlohmann JSON library
RUN apt-get update && apt-get install nlohmann-json3-dev

######################################################################################################

# Create a workspace and download the micro-ROS tools
RUN mkdir /root/microros_ws
WORKDIR /root/microros_ws
RUN git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup

# Update dependencies using rosdep
RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
    apt update && rosdep update && \
    rosdep install --from-paths src --ignore-src -y

# Build micro-ROS tools and source them
RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
    colcon build && \
    source install/local_setup.sh

######################################################################################################

# Clone the PX4 messaging repositories
RUN git clone https://github.com/PX4/px4_ros_com.git src/px4_ros_com && \
    git clone https://github.com/PX4/px4_msgs.git src/px4_msgs

# Move to it and build it
RUN source /root/microros_ws/install/setup.bash && \
    colcon build

######################################################################################################

# Download and build the micro-ROS agent
RUN source /root/microros_ws/install/setup.bash && \
    ros2 run micro_ros_setup create_agent_ws.sh && \
    ros2 run micro_ros_setup build_agent.sh && \
    source /root/microros_ws/install/setup.bash

######################################################################################################
#                                            STARTUP                                                 #
######################################################################################################

# Set starting directory
WORKDIR /root

# Create user workspace
RUN mkdir workspace

# Copy and set up the entrypoint script and tmux configs
COPY ./dockerfiles/entrypoints/entrypoint-ddscore.sh .
RUN chmod +x entrypoint-ddscore.sh

### KUBERNETES ONLY ########
COPY ./workspace/ ./workspace
WORKDIR /root
############################

# Set entrypoint as startup script
ENTRYPOINT ["./entrypoint-ddscore.sh"]